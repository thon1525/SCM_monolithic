name: CI/CD SCM

on:
  push:
    branches:
      - main
    paths:
      - "**"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: yarn install

      - name: Run tests and calculate coverage
        run: |
          yarn test --coverage
          coverage=$(grep -o 'All files.*\s\([0-9]*\)%' coverage/coverage-summary.txt | grep -o '[0-9]*')
          echo "Test coverage is $coverage%"
          echo "coverage=$coverage" >> $GITHUB_ENV

      - name: Check test coverage
        id: check-coverage
        run: |
          if [ $coverage -lt 30 ]; then
            echo "Test coverage is below 30%. Deployment will not proceed."
            exit 1
          fi

      - name: Build the project
        if: ${{ success() }}
        run: yarn build

      - name: Archive Production Artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build

  deploy:
    needs: build
    if: ${{ success() }}
    runs-on: ubuntu-latest

    steps:
      - name: Get the Production Artifact
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build

      - name: Add SSH Key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Ensure target directory exists
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            mkdir -p /home/ubuntu/app
            chown -R ubuntu:ubuntu /home/ubuntu/app

      - name: Copy files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "build/*"
          target: "/home/ubuntu/app/"

      - name: Create .env file
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cat <<EOF > /home/ubuntu/app/build/configs/.env.staging
            NODE_ENV=${{ secrets.NODE_ENV }}
            PORT=${{ secrets.PORT }}
            LOG_LEVEL=${{ secrets.LOG_LEVEL }}
            MONGODB_URL=${{ secrets.MONGODB_URL }}
            EOF

      - name: Start Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            #!/bin/bash

            # Check if nvm is installed
            if [ -s "$HOME/.nvm/nvm.sh" ]; then
              source "$HOME/.nvm/nvm.sh"
            elif [ -s "/usr/local/nvm/nvm.sh" ]; then
              source "/usr/local/nvm/nvm.sh"
            else
              echo "nvm is not installed."
              exit 1
            fi

            # Verify yarn installation
            if ! command -v yarn &> /dev/null; then
              echo "Yarn could not be found"
              exit 1
            fi

            cd /home/ubuntu/app/build
            echo "Checking directory contents..."
            ls -alh # Lists all files in the current directory

            # Check if server.js exists in the correct directory
            if [ ! -f ./src/server.js ]; then
              echo "server.js not found in ./src/"
              exit 1
            fi

            # Install Dependencies
            echo "Installing dependencies..."
            yarn install

            # Check if the PM2 process is running
            if pm2 show SCM > /dev/null; then
              echo "Application is running. Restarting..."
              pm2 restart SCM
            else
